#include "PerlinNoise.h"
#include <random>
#include <numeric>
#include <algorithm>

using namespace std;

namespace revel
{
	
PerlinNoise::PerlinNoise()
{
	p = std::vector<u8>({151,160,137,91,90,15,
	  131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,
	  190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,
	  88,237,149,56,87,174,20,125,136,171,168, 68,175,74,165,71,134,139,48,27,166,
	  77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,
	  102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,208, 89,18,169,200,196,
	  135,130,116,188,159,86,164,100,109,198,173,186, 3,64,52,217,226,250,124,123,
	  5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,
	  223,183,170,213,119,248,152, 2,44,154,163, 70,221,153,101,155,167, 43,172,9,
	  129,22,39,253, 19,98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228,
	  251,34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14,239,107,
	  49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127, 4,150,254,
	  138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180,
	  151,160,137,91,90,15,
	  131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,
	  190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,
	  88,237,149,56,87,174,20,125,136,171,168, 68,175,74,165,71,134,139,48,27,166,
	  77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,
	  102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,208, 89,18,169,200,196,
	  135,130,116,188,159,86,164,100,109,198,173,186, 3,64,52,217,226,250,124,123,
	  5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,
	  223,183,170,213,119,248,152, 2,44,154,163, 70,221,153,101,155,167, 43,172,9,
	  129,22,39,253, 19,98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228,
	  251,34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14,239,107,
	  49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127, 4,150,254,
	  138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180
	});
}	

PerlinNoise::PerlinNoise(u32 seed)
{
	p.resize(256);
	mt19937 rng;
	rng.seed(seed);

	iota(begin(p), end(p), 0);
	shuffle(begin(p), end(p), rng);

	p.insert(end(p), begin(p), end(p));
}

PerlinNoise::~PerlinNoise()
{

}

f32 
PerlinNoise::noise(f32 x, f32 y, f32 z)
{
	//Compute noise cells coordinates and offsets
	i32 ix = math::floor_to_i32(x);
	i32 iy = math::floor_to_i32(y);
	i32 iz = math::floor_to_i32(z);

	f32 dx = x - ix; 
	f32 dy = y - iy; 
	f32 dz = z - iz; 

	//Compute gradient weights
	ix &= (p.size() - 1);
	iy &= (p.size() - 1);
	iz &= (p.size() - 1);

	f32 w000 = grad(ix, iy, iz, dx, dy, dz);
	f32 w100 = grad(ix+1, iy, iz, dx-1, dy, dz);
	f32 w010 = grad(ix, iy+1, iz, dx, dy-1, dz);
	f32 w110 = grad(ix+1, iy+1, iz, dx-1, dy-1, dz);

	f32 w001 = grad(ix, iy, iz+1, dx, dy, dz-1);
	f32 w101 = grad(ix+1, iy, iz+1, dx-1, dy, dz-1);
	f32 w011 = grad(ix, iy+1, iz+1, dx, dy-1, dz-1);
	f32 w111 = grad(ix+1, iy+1, iz+1, dx-1, dy-1, dz-1);

	//Compute trilinear interpolation of weights
	f32 wx = weight(dx);
	f32 wy = weight(dy);
	f32 wz = weight(dz);

	f32 x00 = math::lerp(wx, w000, w100);
	f32 x10 = math::lerp(wx, w010, w110);
	f32 x01 = math::lerp(wx, w001, w101);
	f32 x11 = math::lerp(wx, w011, w111);

	f32 y0 = math::lerp(wy, x00, x10);
	f32 y1 = math::lerp(wy, x01, x11);

	return math::lerp(wz, y0, y1);
}

f32 
PerlinNoise::noise(const point3& p)
{
	return noise(p.x, p.y, p.z);
}

}